@page
@model MapModel
@{
    ViewData["Title"] = "Map";
}

<!-- Search form -->
<section class = "float-right", style="padding-left: 10px;">
    <form class="form-inline md-form mr-auto mb-4">
        <input class="form-control mr-sm-2" type="text" name="SearchString" placeholder="Search" aria-label="Search" value="@Model.SearchString"/>
        <button class="btn btn-outline-warning btn-rounded btn-sm my-0" type="submit">Search</button>
    </form>
    <div class="btn-group btn-group-justified" data-toggle="buttons">
        <label class="btn btn-secondary active">
            <input type="radio" name="options" id="option1" autocomplete="off" onclick="fetchHeatMapData('Temperatures')"> Heat Map
        </label>
        <label class="btn btn-secondary">
            <input type="radio" name="options" id="option2" autocomplete="off"> Humidity Map
        </label>
        <label class="btn btn-secondary">
            <input type="radio" name="options" id="option3" autocomplete="off" onclick="fetchNormalMap()" checked> Normal Map
        </label>
    </div>
    <br>
    <br>
    <div class="btn-group btn-group-justified" data-toggle="buttons">
        <label class="btn btn-secondary active">
            <input type="radio" name="options" id="option1" autocomplete="off" onclick="fetchHeatMapData('Temperatures')"> Polution Map
        </label>
        <label class="btn btn-secondary">
            <input type="radio" name="options" id="option2" autocomplete="off"> Rainfall Map
        </label>
        <label class="btn btn-secondary">
            <input type="radio" name="options" id="option3" autocomplete="off" onclick="fetchNormalMap()"> InCazDeOrice Map
        </label>
    </div>
</section>
<div id="mapid">
    <script>

	const mymap = L.map('mapid').setView([44.432720364400375, 26.104799260187548], 11.25);

	L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 50,
		attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
			'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
		id: 'mapbox/streets-v11',
		tileSize: 512,
		zoomOffset: -1
	}).addTo(mymap);

    let polygon = null;

    function model3D(id){
        window.location.href = `/BuildingBlock/${id}`;
    }

    @foreach (var block in Model.BuildingBlocks)
    {
        <text>
            polygon = L.polygon(@Html.Raw(block.Polygon.RawVertices)).addTo(mymap);
            polygon.on("click", () => model3D(@block.Id))
        </text>
    }

    mymap.on('click', function (clk) {
        var coord = clk.latlng;
        var lat = coord.lat;
        var lng = coord.lng;
        console.log("[ " + lat + ", " + lng + "]");
    });

    var cfg = {
        // radius should be small ONLY if scaleRadius is true (or small radius is intended)
        // if scaleRadius is false it will be the constant radius used in pixels
        radius: .002,
        maxOpacity: .8,
        // scales the radius based on map zoom
        scaleRadius: true,
        // if set to false the heatmap uses the global maximum for colorization
        // if activated: uses the data maximum within the current map boundaries
        //   (there will always be a red spot with useLocalExtremas true)
        useLocalExtrema: false,
        // which field name in your data represents the latitude - default "lat"
        latField: 'lat',
        // which field name in your data represents the longitude - default "lng"
        lngField: 'lng',
        // which field name in your data represents the data value - default "value"
        valueField: 'count'
    };

    var heatmapLayer = new HeatmapOverlay(cfg).addTo(mymap);

    function fetchHeatMapData(name) {
        fetch(`/data/${name}.json`)
            .then(res => res.json())
            .then(data => heatmapLayer.setData(data));
    }

    function fetchNormalMap()
    {
        heatmapLayer.setData({max:0, data: []})
    }

    mymap.on('dblclick', function(dblclk) {
        console.log(" ");
    });

    //const marker = L.marker([44.38343860062599, 26.10918715596199]).addTo(mymap);
    </script>
    @* Cluj: You clicked the map at latitude: 75.08980272811844 and longitude: -78.20472621891584 *@
    @* Jurilovca: You clicked the map at latitude: 74.714681752231 and longitude: -75.56622261083649*@
</div>
